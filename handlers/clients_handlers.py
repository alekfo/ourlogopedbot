from peewee import IntegrityError, DoesNotExist
from datetime import datetime
import telebot
from telebot import TeleBot
from telebot.types import Message, BotCommand, ReplyKeyboardRemove
from config import admin_id
from DATABASE.peewee_config import Client, Week, Lesson, Feedback
from states import reg_states_client, reg_states_admin
from keyboards.main_keyboards import (
    start_registration,
    go_to_menu,
    get_contact,
    main_clients_commands,
    main_admin_commands,
    schedule_menu)


def reg_clients_handlers(bot):

    # ========–ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ô –ë–õ–û–ö –ö–õ–ò–ï–ù–¢–ê===========
    @bot.message_handler(state=reg_states_client.in_any_block, func=lambda message: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è' in message.text)
    def information(message: Message):
        bot.send_message(message.chat.id,
                         '–≠—Ç–æ—Ç –±–æ—Ç –¥–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å:\n\t'
                         '- —Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º;\n\t'
                         '- –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∑–∞–ø–∏—Å—è—Ö;\n\t'
                         '- –æ—Ç–º–µ–Ω—è—Ç—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏\n\n'
                         '–î–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–≥–æ —Ü–µ–Ω—Ç—Ä–∞ –±—É–¥–µ–º —Ä–∞–¥—ã –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –æ—Ç–∑—ã–≤–∞–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–ºüí¨üìß\n'
                         '–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤—ã–º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å, –ø–µ—Ä–µ–π–¥—è –ø–æ –≤–∫–ª–∞–¥–∫–µ "–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è" –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –º–µ–Ω—é\n\n'
                         '–î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                         reply_markup=go_to_menu(), parse_mode='HTML')
        bot.set_state(message.from_user.id, reg_states_client.in_menu, message.chat.id)
    # ==========–ö–û–ù–ï–¶ –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–û–ì–û –ë–õ–û–ö–ê –ö–õ–ò–ï–ù–¢–ê=============

    # ========–ë–õ–û–ö –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê================
    @bot.message_handler(state=reg_states_client.in_any_block, func=lambda message: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in message.text)
    def client_schedule(message: Message):
        current_date = datetime.now().date()
        curr_client = Client.get_or_none(Client.clients_id == message.from_user.id)
        lessons = curr_client.lessons
        active_lessons = [
            i_lesson
            for i_lesson in lessons
            if i_lesson.lesson_date >= current_date
        ]
        if not active_lessons:
            bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π", reply_markup=go_to_menu(), parse_mode='HTML')
            bot.set_state(message.from_user.id, reg_states_client.in_menu, message.chat.id)
        else:
            output_str = '–í–æ—Ç –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µüóìÔ∏è:\n\n'
            for i_les in active_lessons:
                output_str += f'{i_les.days_dict.get(i_les.day_of_week, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–µ–Ω—å")} - {i_les.lessons_dict.get(i_les.lesson_number, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –≤—Ä–µ–º—è")}\n'
            bot.send_message(message.chat.id,
                             output_str,
                             reply_markup=go_to_menu(), parse_mode='HTML')
            bot.set_state(message.from_user.id, reg_states_client.in_menu, message.chat.id)
# ========–ö–û–ù–ï–¶ –ë–õ–û–ö–ê –†–ê–°–ü–ò–°–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê================

# ========–ë–õ–û–ö –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò –ö–õ–ò–ï–ù–¢–ê================
    @bot.message_handler(state=reg_states_client.in_any_block,
                         func=lambda message: '–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è' in message.text)
    def feedback(message: Message):
        bot.send_message(message.chat.id,
                         '–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Å –æ—Ç–∑—ã–≤–æ–ºüí¨\n–ú—ã —Ä–∞–¥—ã –ª—é–±–æ–π –∫—Ä–∏—Ç–∏–∫–µ –∏ —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ!\n\n'
                         '–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
                         reply_markup=go_to_menu(), parse_mode='HTML')
        bot.set_state(message.from_user.id, reg_states_client.get_feedback, message.chat.id)
# ========–ö–û–ù–ï–¶ –ë–õ–û–ö–ê –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò –ö–õ–ò–ï–ù–¢–ê===========

# ========–û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–Ø –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò================
    @bot.message_handler(state=reg_states_client.get_feedback)
    def feedback(message: Message):
        if message.text == '–ü–µ—Ä–µ–π—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é':
            output_txt = '–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n\n'
            output_txt += '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è‚ùì - –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –±–æ—Ç–∞\n'
            output_txt += '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µüóìÔ∏è - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n'
            output_txt += '–û—Ç–∑—ã–≤—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüíæ - –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n'
            bot.send_message(message.chat.id, output_txt, reply_markup=main_clients_commands(), parse_mode='HTML')
            bot.set_state(message.from_user.id, reg_states_client.in_any_block, message.chat.id)
        else:
            curr_client = Client.get_or_none(Client.clients_id == message.from_user.id)
            Feedback.create(
                client=curr_client,
                text=message.text,
                feedback_date=datetime.now()
            )
            bot.send_message(message.chat.id,
                             '–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π!üíî\n–ú—ã –æ—á–µ–Ω—å —Ü–µ–Ω–∏–º —ç—Ç–æ!',
                             reply_markup=go_to_menu(), parse_mode='HTML')
            bot.set_state(message.from_user.id, reg_states_client.in_menu, message.chat.id)
            try:
                curr_feedback = Feedback.get_or_none(Feedback.client == curr_client)
                date = curr_feedback.feedback_date
                text = message.text
                bot.send_message(admin_id,
                                 f'üéÜ{curr_client.clients_name} {curr_client.clients_sirname} –æ—Å—Ç–∞–≤–∏–ª –Ω–æ–≤—ã–π –æ—Ç–∑—ã–≤:\n\n"{text}"\n',
                                 reply_markup=go_to_menu(), parse_mode='HTML')
            except Exception as e:
                print('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É –æ—Ç–∑—ã–≤–∞:', e)
# ========–ö–û–ù–ï–¶ –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–Ø –û–ë–†–ê–¢–ù–û–ô –°–í–Ø–ó–ò===========

#=====–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã —É—Ä–æ–∫–∞=====
    @bot.callback_query_handler(
        func=lambda callback_query: (
            callback_query.data in ["confirmed", "canceled"]
        )
    )
    def handle_confirmation(callback_query):
        user_id = callback_query.from_user.id
        message_id = callback_query.message.message_id
        action = callback_query.data
        original_text = callback_query.message.text

        if action == 'confirmed':
            status_text = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ‚úÖ'
            reply_text = '–ñ–¥–µ–º –í–∞—Å –∫ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É —á–∞—Å—É!üôã‚Äç‚ôÄÔ∏è'
            admin_message = '–ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª'
        else:
            status_text = '–û—Ç–º–µ–Ω–µ–Ω–æ‚ùå'
            reply_text = '–°–ø–∞—Å–∏–±–æ –∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ! –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∏—Ç—å –¥–∞—Ç—É –Ω–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è!‚òéÔ∏è'
            admin_message = '–û–¢–ú–ï–ù–ò–õ'

        new_text = f'{original_text}\n\n{status_text}'
        #–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        bot.edit_message_text(
            chat_id=user_id,
            message_id=message_id,
            text=new_text,
            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        bot.send_message(
            callback_query.from_user.id,
            reply_text
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.
        curr_client = Client.get_or_none(Client.clients_id == callback_query.from_user.id)
        message_to_admin = f'{curr_client.clients_name} {curr_client.clients_sirname} {admin_message} –±–ª–∏–∂–∞–π—à—É—é –∑–∞–ø–∏—Å—å!'
        bot.send_message(
            admin_id,
            message_to_admin,
        )
#=====–ö–û–ù–ï–¶ –û–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Ä–æ–∫–∞=====